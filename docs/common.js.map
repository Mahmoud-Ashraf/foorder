{"version":3,"sources":["./src/app/shared/services/order.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAMO,MAAM,YAAY;IAEvB,YACU,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;IAEnC,CAAC;IAID,SAAS,CAAC,OAAe,CAAC,EAAE,UAAkB,CAAC;QAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,IAAI,YAAY,OAAO,EAAE,CAAC,CAAC;QAC1E,iBAAiB;QACjB,8BAA8B;QAC9B,oDAAoD;QACpD,MAAM;QACN,uBAAuB;QACvB,KAAK;QACL,yDAAyD;QACzD,mCAAmC;IACrC,CAAC;IACD,gBAAgB,CAAC,MAAc;QAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,MAAM,EAAE,CAAC,CAAC;QACpD,iBAAiB;QACjB,8BAA8B;QAC9B,oDAAoD;QACpD,MAAM;QACN,uBAAuB;QACvB,KAAK;QACL,yDAAyD;QACzD,mCAAmC;IACrC,CAAC;IACD,QAAQ,CAAC,EAAO;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,WAAW,CAAC,EAAO,EAAE,KAAU;QAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,QAAQ,CAAC,KAAU;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IACD,6BAA6B;IAC7B,uDAAuD;IACvD,IAAI;IAEJ,cAAc,CAAC,WAAmB;QAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,WAAW,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,kBAAkB,CAAC,OAAe,CAAC,EAAE,UAAkB,CAAC;QACtD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,yBAAyB,IAAI,YAAY,OAAO,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,iBAAiB,CAAC,gBAAyB;QACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,gBAAgB,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,YAAY,CAAC,cAAmB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IAChE,CAAC;IAED,wBAAwB;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;IAE1D,CAAC;IAED,oBAAoB,CAAC,gBAAwB,EAAE,cAAmB;QAChE,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,0BAA0B,gBAAgB,EAAE,EAAE,cAAc,CAAC,CAAC;IAC5F,CAAC;IAED,gBAAgB,CAAC,EAAU,EAAE,KAAU;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;;wEAzEU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { RequestsService } from './requests.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n\r\n  constructor(\r\n    private requests: RequestsService\r\n  ) {\r\n  }\r\n\r\n\r\n\r\n  getOrders(page: number = 1, perPage: number = 0) {\r\n    return this.requests.getApi(`resturants?page=${page}&perPage=${perPage}`);\r\n    // .then(res => {\r\n    //   if (res.status !== 200) {\r\n    //     throw new Error('Faild To Fetch Resturants');\r\n    //   }\r\n    //   return res.json();\r\n    // })\r\n    // .then(resData => console.log('get response', resData))\r\n    // .catch(err => console.log(err));\r\n  }\r\n  getOrdersPerUser(userId: string) {\r\n    return this.requests.getApi(`userOrders/${userId}`);\r\n    // .then(res => {\r\n    //   if (res.status !== 200) {\r\n    //     throw new Error('Faild To Fetch Resturants');\r\n    //   }\r\n    //   return res.json();\r\n    // })\r\n    // .then(resData => console.log('get response', resData))\r\n    // .catch(err => console.log(err));\r\n  }\r\n  getOrder(id: any) {\r\n    return this.requests.getApi(`order/${id}`);\r\n  }\r\n\r\n  updateOrder(id: any, order: any) {\r\n    return this.requests.putApi(`order/${id}`, order);\r\n  }\r\n\r\n  addOrder(order: any) {\r\n    return this.requests.postApi('order', order);\r\n  }\r\n  // deleteResturant(id: any) {\r\n  //   return this.requests.deleteApi(`resturant/${id}`);\r\n  // }\r\n\r\n  getTodayOrders(resturantId: string) {\r\n    return this.requests.getApi(`todayOrders/${resturantId}`);\r\n  }\r\n\r\n  getCollectedOrders(page: number = 1, perPage: number = 0) {\r\n    return this.requests.getApi(`collected-orders?page=${page}&perPage=${perPage}`);\r\n  }\r\n\r\n  getCollectedOrder(collectedOrderId?: string) {\r\n    return this.requests.getApi(`collected-order/${collectedOrderId}`);\r\n  }\r\n\r\n  collectOrder(collectedOrder: any) {\r\n    return this.requests.postApi(`collect-order`, collectedOrder);\r\n  }\r\n\r\n  checkTodayCollectedOrder() {\r\n    return this.requests.getApi(`checkTodayCollectedOrder`);\r\n\r\n  }\r\n\r\n  updateCollectedOrder(collectedOrderId: string, collectedOrder: any) {\r\n    return this.requests.putApi(`update-collected-order/${collectedOrderId}`, collectedOrder);\r\n  }\r\n\r\n  updateTodayOrder(id: string, order: any) {\r\n    return this.requests.putApi(`updateTodayOrder/${id}`, order);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}